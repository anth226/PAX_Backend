#!/usr/bin/env node

/**
 * Module dependencies.
 */

 const fs = require('fs');
 var app = require('../app');
 var debug = require('debug')('api-file:server');
 var http = require('http');
 const schedule = require('node-schedule');
 const redis = require("redis");
 
 
 const rdsFile = redis.createClient({ db: process.env.temp_file_session_db || 2 });
 
 /**
  * Get port from environment and store in Express.
  */
 
 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);
 
 /**
  * Create HTTP server.
  */
 
 var server = http.createServer(app);
 
 /**
  * Listen on provided port, on all network interfaces.
  */
 
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   console.log(bind)
   debug('Listening on ' + bind);
 }
 
 // schedule.scheduleJob('*/4 * * * * *', () => {
 //   new Promise((reslove, reject) => {
 //     rdsFile.keys("*", (err, keys)=> {
 //       if(err) return reject();
 //       reslove(keys);
 //     });
 //   }).then((keys) => {
 //     let promises= [];
 //     for(i=0; i<keys.length; i++) {
 //       promises.push(
 //           new Promise((resolve, reject) => {
 //             rdsFile.lrange(keys[i], 0, -1, (err, vals) => {
 //               if(err) return reject(err);
 //               return resolve(vals);
 //             });
 //           })
 //       );
 //     }
 //     return Promise.all(promises);
 //   }).then((vals) => {
 //     let rdfiles = [];
 //     for(i=0; i<vals.length; i++) {
 //       rdfiles = rdfiles.concat(vals[i]);
 //     }
 //     // console.log(rdfiles.length);
 //     return new Promise((resolve, reject) => {
 //       fs.readdir(process.env.temp_path, (err, files) => {
 //         if(err) return reject(err);
 //         //console.log(files.length);
 //         files = files.filter( ele=>( !rdfiles.some((radisFile)=>radisFile === ele) ) )
 //         //console.log(files.length);
 //         return resolve(files);
 //       });
 //     });
 //   }).then((files) => {
 //     for(let i=0; i<files.length; i++) {
 //       fs.rmdir(process.env.temp_path +'/'+ files[i], { recursive: true },(err) => {
 //         if (err) return;
 //         //console.log(`${files[i]} deleted`);
 //       });
 //     }
 //   }).catch((err) => {
 //     //console.log(err);
 //   });
 // });
 
 